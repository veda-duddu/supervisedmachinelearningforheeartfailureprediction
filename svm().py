# -*- coding: utf-8 -*-
"""SVM().ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10z4ZW5w6tNFeFPr0hfHvNumhmUia5Whd

The code here is the same accross all files except the name of algorithm have been chnaged (ex: logistic regression or KNN etc). However, the code does the exact same thing in all files.
"""

from google.colab import files
upload = files.upload()

import pandas as pd
import io
df_raw = pd.read_csv(io.BytesIO(upload['heart_failure_clinical_records_dataset.csv']))
df = df_raw.copy()

import numpy as np
import itertools
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
from sklearn.model_selection import StratifiedKFold, KFold
from sklearn.svm import SVC
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from mlxtend.plotting import plot_confusion_matrix
from statistics import mean, stdev
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.feature_selection import f_classif

display(df)

df.info()

print(df.isnull().sum())
print("The numbers of rows that are duplicated are",df.duplicated().sum())

data = df.values
                       
features = ['age','anaemia','creatinine_phosphokinase','diabetes','ejection_fraction','high_blood_pressure','platelets','serum_creatinine','serum_sodium','sex','smoking','time' ]
categorical_features = ['anaemia','diabetes','high_blood_pressure','sex','smoking']
numerical_features = ['age','creatinine_phosphokinase','ejection_fraction','platelets','serum_creatinine','serum_sodium','time']
x = df.loc[:,features].values
y = df.loc[:, ['DEATH_EVENT']].values
y = np.ravel(y)

"""The data is normalized here"""

scaler = preprocessing.MinMaxScaler()
x_scaled = scaler.fit_transform(x)

skf = StratifiedKFold(n_splits=5)

"""Introducing stratified K-Fold Cross Validation

Driver code: We perform cross validation, and print the confusion matrix
"""

lst_accu_stratified = []
cm_sum = []
StratifiedKFold(n_splits=5, random_state=1, shuffle=True)
for train_index, test_index in skf.split(x, y):
  x_train, x_test = x_scaled[train_index], x_scaled[test_index]
  y_train, y_test = y[train_index], y[test_index]
  support_vector_machine = SVC()
  support_vector_machine.fit(x_train,y_train)
  target_prediction = support_vector_machine.predict(x_test)
  lst_accu_stratified.append(support_vector_machine.score(x_test, y_test))
  cm = confusion_matrix(y_test, target_prediction)
  cm_sum.append(cm)
m = sum(cm_sum)
plt.figure()
plot_confusion_matrix(m, figsize=(12,8), hide_ticks=True, cmap=plt.cm.Reds)

print('List of possible accuracy:', lst_accu_stratified)
print('\nMaximum Accuracy That can be obtained from this model is:',
      max(lst_accu_stratified)*100, '%')
print('\nMinimum Accuracy:',
      min(lst_accu_stratified)*100, '%')
print('\nOverall Accuracy:',
      mean(lst_accu_stratified)*100, '%')
print('\nStandard Deviation is:', stdev(lst_accu_stratified))

"""We now print the best features"""

selector = SelectKBest(f_classif, k = 3)
x_new = selector.fit_transform(x, y)
names = selector.get_feature_names_out()
names_1 = selector.get_support()
print(names)
print(names_1)
x_new.shape