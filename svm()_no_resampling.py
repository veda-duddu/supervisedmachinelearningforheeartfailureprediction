# -*- coding: utf-8 -*-
"""SVM()_no resampling .ipynb

This file gives the accuracy without k fold stratified resampling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10J26JvwaNvQUWBfrqiPKBEH_o7lfDzNr

Uploading our dataset into the google collab notebook. Please upload the file "heart_failure_clinical_records_dataset.csv" in the above upload option.
"""

from google.colab import files
upload = files.upload()

"""We then convert our dataset from a CSV file to a dataframe."""

import pandas as pd
import io
df_raw = pd.read_csv(io.BytesIO(upload['heart_failure_clinical_records_dataset.csv']))
df = df_raw.copy()

"""We will now import the necessary pakcages to continue our process of Machine Leanring. """

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn import preprocessing
from sklearn.model_selection import StratifiedKFold, KFold
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from statistics import mean, stdev
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.feature_selection import f_classif
from sklearn.model_selection import train_test_split

"""We will now begin to explore the dataset. This is how the dataset currently looks before we begin the procedure of cleaning"""

display(df)

"""Now, we will look into the types of data comprised in each column i.e the parameters of our dataset."""

df.info()

print(df.isnull().sum())
print("The numbers of rows that are duplicated are",df.duplicated().sum())

data = df.values
                       
features = ['age','anaemia','creatinine_phosphokinase','diabetes','ejection_fraction','high_blood_pressure','platelets','serum_creatinine','serum_sodium','sex','smoking','time']
x = df[features]
y = df['DEATH_EVENT']
y = np.ravel(y)

"""We now split the data set"""

x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.2, random_state=2)

"""We now run the algorithm and print accuracy"""

support_vector_machine = SVC()
support_vector_machine.fit(x_train,y_train)
target_prediction = support_vector_machine.predict(x_test)

print(accuracy_score(y_test, target_prediction))
